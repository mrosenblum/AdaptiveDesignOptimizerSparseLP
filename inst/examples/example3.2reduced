#Install R package if not already done so:
#remotes::install_github("mrosenblum/AdaptiveDesignOptimizerSparseLP")

# Load R package
library(AdaptiveDesignOptimizerSparseLP)
set.seed(32515);
# Set all problem parameters based on Example 3.2, and using explicit choices of the following input parameters:
# The proportion of the population in subpopulation 1:
subpopulation.1.proportion=0.5;
# Sample size in stage 1 for each subpopulation: 50; when both subpopulations enrolled in stage 2, then 50 new participants are enrolled from each subpopulation; when only 1 subpopulation is enrolled in stage 2 then 150 new participants are enrolled from that subpopulation. This is equivalent to setting n=200 in our adaptive design template n^(1b) from Section 3.2 of the paper. These sample sizes are encoded below:
stage.1.sample.sizes=c(50,50);
stage.2.sample.sizes.per.enrollment.choice=matrix(c(50,50,
                                                   0,0,
                                                   150,0,
                                                   0,150),nrow=4,ncol=2,byrow=TRUE,dimnames=list(c(),c("Subpopulation1Stage2SampleSize","Subpopulation2Stage2SampleSize")));
# Minimum, clinically meaningful treatment effect size: Delta^min=sqrt(1/2)*(qnorm(0.95+1e-4)+qnorm(0.95))/5=0.465.
Delta_min = 1.2*sqrt(1/2)*(qnorm(0.95+1e-4)+qnorm(0.95))/5;
# The corresponding data generating distributions are encoded as follows (where we set the outcome variance to 1 for each subpopulation bby study arm combination):
data.generating.distributions=matrix(data=c(0,0,1,1,1,1,
                                           0,Delta_min,1,1,1,1,
                                           Delta_min,0,1,1,1,1,
                                           Delta_min,Delta_min,1,1,1,1),nrow=4,ncol=6,byrow=TRUE,dimnames=list(c(),c("Delta1","Delta2","Variance10","Variance11","Variance20","Variance21")));
# The resulting non-centrality parameter (see Section 5.1 of the paper) matches that used in the paper computations.
# Required Familywise Type I error:
total.alpha=0.05;
# We set the desired power for each of the power constraint to be 0.83 in the first four iterations of our algorithm, rather than the intended final output of 0.82, since we anticipate rounding in the final iteration that leads to a slight decrease in power.
desired.power=0.8;
power.constraints=matrix(c(0,0,0,
			   0,desired.power,0,
			   desired.power,0,0,
			   0,0,desired.power),nrow=4,ncol=3,byrow=TRUE,dimnames=list(c(),c("PowerH01","PowerH02","PowerH0C")));
objective.function.weights=0.25*c(1,1,1,1);
prior.covariance.matrix=diag(2);
type.of.LP.solver="glpk";
discretization.parameter=c(3,3,1);
number.cores=1;

# Run first iteration solving sparse linear program
optimized.policy <- optimize_design(subpopulation.1.proportion,total.alpha,data.generating.distributions,stage.1.sample.sizes,stage.2.sample.sizes.per.enrollment.choice,objective.function.weights,power.constraints,type.of.LP.solver,discretization.parameter,number.cores,prior.covariance.matrix=prior.covariance.matrix)

print("The optimized.policy returned by our software consists of the pair of functions pi_1 and pi_2 as defined in Section 2.1 of the manuscript, along with state spaces and actions spaces for the sequential decision problem denoted by S1, A1, S2, A2. Each state in S1 is a rectangle with lower-left coordinates (x1,y1) encoded as optimized.policy$lower_boundaries and upper right coordinates (x2,y2) encoded as optimized.policy$upper_boundaries. Each action in A1 is an integer among 1,2,...,d corresponding to each of the d stage 2 enrollment choices that were input by the user.
Since we allow the stage 2 state space to depend on end of stage 1 action in A1, we have that S2 is a function from an action in A1. E.g., the stage 2 state space after stage 1 action a1=3 is encoded as
optimized.policy$S2[[3]]. Each action in A2 is an integer among 1,2,...,7 encoding the following outcome of the multiple testing procedure: Reject none,Reject H01,Reject H02,Reject H0C,Reject H01 and H0C,Reject H02 and H0C,Reject all, respectively.")

print("Lower-left and upper right coordinates of third rectangle in list of stage 1 states S1:")
optimized.policy$S1[[3]]$lower_boundaries
optimized.policy$S1[[3]]$upper_boundaries

print("Stochastic policy pi_1 evaluated at third rectangle in S1, i.e., the probabilities of taking each action in A1 given that the first stage z-statistics are in the rectangle corresponding to this state:")
optimized.policy$pi_1(3)

print("Lower-left and upper right coordinates of ninth rectangle in list of stage 2 states S2 following action a1=4")
optimized.policy$S2[[3]][[4]]$lower_boundaries
optimized.policy$S2[[3]][[4]]$upper_boundaries

print("Stochastic policy pi_2 evaluated at third rectangle in S1, action a1=2, and ninth rectangle in S2:")
optimized.policy$pi_2(3,4,9)
